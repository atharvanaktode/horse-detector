# -*- coding: utf-8 -*-
"""horse_identifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jO8Z475lJUG8kKzObj2lAww90q2nwCMg
"""

from google.colab import drive
drive.mount('/content/drive')

train_dir = '/content/drive/MyDrive/horse_data/train'
val_dir = '/content/drive/MyDrive/horse_data/val'
test_dir = '/content/drive/MyDrive/horse_data/test'

import os
import numpy as np
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Dropout
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau
from sklearn.utils.class_weight import compute_class_weight

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=25,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.15,
    zoom_range=0.2,
    horizontal_flip=True,
    brightness_range=[0.8, 1.2],
    fill_mode='nearest'
)

val_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(128, 128),
    batch_size=32,
    class_mode='binary'
)
print(dict(zip(train_generator.class_indices.keys(),
         np.bincount(train_generator.classes))))

val_generator = val_datagen.flow_from_directory(
    val_dir,
    target_size=(128, 128),
    batch_size=32,
    class_mode='binary'
)

print(dict(zip(val_generator.class_indices.keys(),
         np.bincount(val_generator.classes))))

test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=(128, 128),
    batch_size=32,
    class_mode='binary',
    shuffle=False
)

print(dict(zip(test_generator.class_indices.keys(),
         np.bincount(test_generator.classes))))

class_weights = compute_class_weight(
    'balanced',
    classes=np.unique(train_generator.classes),
    y=train_generator.classes
)
class_weights = dict(enumerate(class_weights))
print("Computed class weights:", class_weights)

base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(128,128,3))
base_model.trainable = False  # Freeze base initially

x = GlobalAveragePooling2D()(base_model.output)
x = Dropout(0.3)(x)
output = Dense(1, activation='sigmoid')(x)
model = Model(inputs=base_model.input, outputs=output)

optimizer = Adam(learning_rate=1e-4)
model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])

es = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)
rlr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=5, min_lr=1e-6)

model.summary()

history = model.fit(
    train_generator,
    validation_data=val_generator,
    epochs=30,
    class_weight=class_weights,
    callbacks=[es, rlr],
    verbose=1
)

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'], label='train_acc')
plt.plot(history.history['val_accuracy'], label='val_acc')
plt.plot(history.history['loss'], label='train_loss')
plt.plot(history.history['val_loss'], label='val_loss')
plt.xlabel('Epoch')
plt.ylabel('Value')
plt.legend()
plt.show()

base_model.trainable = True
optimizer_finetune = Adam(learning_rate=1e-5)
model.compile(optimizer=optimizer_finetune, loss='binary_crossentropy', metrics=['accuracy'])

print("\nðŸ”§ Fine-tuning MobileNetV2 layers...")
history_finetune = model.fit(
    train_generator,
    validation_data=val_generator,
    epochs=20,
    class_weight=class_weights,
    callbacks=[es, rlr],
    verbose=1
)

print("\nðŸ“Š Evaluating on test data...")
test_loss, test_acc = model.evaluate(test_generator)
print(f"âœ… Test Accuracy: {test_acc:.4f}, Test Loss: {test_loss:.4f}")

import os
import random
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing import image

test_dir = '/content/drive/MyDrive/horse_data/test'

class_folder = random.choice(os.listdir(test_dir))

class_path = os.path.join(test_dir, class_folder)
img_name = random.choice(os.listdir(class_path))
img_path = os.path.join(class_path, img_name)

img = image.load_img(img_path, target_size=(128, 128))
x = image.img_to_array(img) / 255.0
x = np.expand_dims(x, axis=0)

#0 -> horse, 1 -> no_horse, labeled subclasses wrong in folders
pred_prob = model.predict(x)[0][0]

if pred_prob > 0.5:
    pred_class = "no_horse"
    confidence = pred_prob
else:
    pred_class = "horse"
    confidence = 1 - pred_prob

plt.imshow(img)
plt.axis('off')
plt.title(f"no_horse -> 1 : horse -> 0\nPredicted class: {pred_class} ({pred_prob:.3f})\nActual: {class_folder}\nConfidence: {confidence:.4f}")
plt.show()

model.save('horse_model2.keras')

train_generator.class_indices